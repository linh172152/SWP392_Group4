// Prisma schema for EV Battery Swap Station Management System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

enum UserRole {
  DRIVER
  STAFF
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  passwordHash  String     @map("password_hash")
  fullName      String?    @map("full_name")
  phone         String?    @unique
  avatar        String?
  role          UserRole
  status        UserStatus @default(ACTIVE)
  noShowCount   Int        @default(0) @map("no_show_count")
  
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // Relations
  vehicles            Vehicle[]
  bookings            Booking[]
  transactions        Transaction[]
  userSubscriptions   UserSubscription[]
  supportTickets      SupportTicket[]    @relation("TicketCreator")
  assignedTickets     SupportTicket[]    @relation("TicketAssignee")
  refreshTokens       RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// ============================================
// VEHICLE & BATTERY MODELS
// ============================================

model BatteryModel {
  id           String   @id @default(uuid())
  name         String   @unique
  capacityKwh  Decimal  @map("capacity_kwh") @db.Decimal(5, 2)
  voltage      Decimal? @db.Decimal(5, 2)
  manufacturer String?
  description  String?
  
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  vehicles     Vehicle[]
  batteries    Battery[]

  @@map("battery_models")
}

model Vehicle {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  vin            String   @unique
  model          String?
  batteryModelId String   @map("battery_model_id")
  licensePlate   String?  @map("license_plate")
  
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  batteryModel BatteryModel @relation(fields: [batteryModelId], references: [id])
  bookings     Booking[]

  @@map("vehicles")
}

// ============================================
// STATIONS & BATTERIES
// ============================================

enum StationStatus {
  ACTIVE
  MAINTENANCE
  INACTIVE
}

model Station {
  id              String        @id @default(uuid())
  name            String
  address         String
  latitude        Decimal       @db.Decimal(10, 8)
  longitude       Decimal       @db.Decimal(11, 8)
  totalCapacity   Int           @map("total_capacity")
  status          StationStatus @default(ACTIVE)
  operatingHours  Json?         @map("operating_hours")
  contactPhone    String?       @map("contact_phone")
  description     String?
  
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  batteries      Battery[]
  bookings       Booking[]
  transactions   Transaction[]
  stationStocks  StationStock[]

  @@map("stations")
}

enum BatteryStatus {
  AVAILABLE
  RESERVED
  IN_USE
  CHARGING
  MAINTENANCE
  FAULTY
}

enum HealthStatus {
  HEALTHY
  DEGRADED
  FAULTY
}

model Battery {
  id                String        @id @default(uuid())
  serialNumber      String        @unique @map("serial_number")
  batteryCode       String        @unique @map("battery_code")
  modelId           String        @map("model_id")
  stationId         String?       @map("station_id")
  status            BatteryStatus @default(AVAILABLE)
  soh               Decimal       @default(100.00) @db.Decimal(5, 2) // State of Health %
  healthStatus      HealthStatus  @default(HEALTHY) @map("health_status")
  lastSohCheck      DateTime?     @map("last_soh_check")
  chargeCycles      Int           @default(0) @map("charge_cycles")
  maintenanceNotes  String?       @map("maintenance_notes")
  
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")

  // Relations
  model                BatteryModel  @relation(fields: [modelId], references: [id])
  station              Station?      @relation(fields: [stationId], references: [id])
  reservedBookings     Booking[]     @relation("ReservedBattery")
  transactionsAsOld    Transaction[] @relation("OldBattery")
  transactionsAsNew    Transaction[] @relation("NewBattery")

  @@map("batteries")
}

// ============================================
// BOOKING SYSTEM
// ============================================

enum BookingStatus {
  CONFIRMED
  CHECKED_IN
  COMPLETED
  CANCELLED
  NO_SHOW
}

model Booking {
  id                 String        @id @default(uuid())
  bookingCode        String        @unique @map("booking_code")
  userId             String        @map("user_id")
  vehicleId          String        @map("vehicle_id")
  stationId          String        @map("station_id")
  reservedBatteryId  String?       @map("reserved_battery_id")
  scheduledTime      DateTime      @map("scheduled_time")
  gracePeriodEnd     DateTime?     @map("grace_period_end")
  checkedInAt        DateTime?     @map("checked_in_at")
  status             BookingStatus @default(CONFIRMED)
  cancellationReason String?       @map("cancellation_reason")
  notes              String?
  
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  // Relations
  user            User          @relation(fields: [userId], references: [id])
  vehicle         Vehicle       @relation(fields: [vehicleId], references: [id])
  station         Station       @relation(fields: [stationId], references: [id])
  reservedBattery Battery?      @relation("ReservedBattery", fields: [reservedBatteryId], references: [id])
  transaction     Transaction?

  @@map("bookings")
}

// ============================================
// TRANSACTIONS & PAYMENTS
// ============================================

enum SwapType {
  SCHEDULED
  WALK_IN
}

enum PaymentStatus {
  PAID
  FREE_BY_QUOTA
  PENDING
  FAILED
  REFUNDED
}

model Transaction {
  id            String        @id @default(uuid())
  bookingId     String?       @unique @map("booking_id")
  userId        String        @map("user_id")
  stationId     String        @map("station_id")
  oldBatteryId  String?       @map("old_battery_id")
  newBatteryId  String        @map("new_battery_id")
  swapType      SwapType      @default(SCHEDULED) @map("swap_type")
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  amount        Decimal       @default(0.00) @db.Decimal(10, 2)
  currency      String        @default("VND")
  notes         String?
  
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  booking     Booking?  @relation(fields: [bookingId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  station     Station   @relation(fields: [stationId], references: [id])
  oldBattery  Battery?  @relation("OldBattery", fields: [oldBatteryId], references: [id])
  newBattery  Battery   @relation("NewBattery", fields: [newBatteryId], references: [id])
  payment     Payment?

  @@map("transactions")
}

enum PaymentMethod {
  CASH
  ONLINE_VNPAY
  ONLINE_MOMO
  WALLET
}

enum PaymentMethodStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Payment {
  id                 String              @id @default(uuid())
  transactionId      String              @unique @map("transaction_id")
  amount             Decimal             @db.Decimal(10, 2)
  method             PaymentMethod
  status             PaymentMethodStatus @default(PENDING)
  paymentGatewayRef  String?             @map("payment_gateway_ref")
  paidAt             DateTime?           @map("paid_at")
  
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("payments")
}

// ============================================
// SERVICE PACKAGES & SUBSCRIPTIONS
// ============================================

enum PackageStatus {
  ACTIVE
  INACTIVE
}

model ServicePackage {
  id             String        @id @default(uuid())
  name           String
  description    String?
  price          Decimal       @db.Decimal(10, 2)
  swapQuota      Int           @map("swap_quota")
  durationDays   Int           @map("duration_days")
  status         PackageStatus @default(ACTIVE)
  
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  // Relations
  subscriptions UserSubscription[]

  @@map("service_packages")
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

model UserSubscription {
  id             String             @id @default(uuid())
  userId         String             @map("user_id")
  packageId      String             @map("package_id")
  startDate      DateTime           @map("start_date") @db.Date
  endDate        DateTime           @map("end_date") @db.Date
  remainingQuota Int                @map("remaining_quota")
  status         SubscriptionStatus @default(ACTIVE)
  
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  // Relations
  user    User           @relation(fields: [userId], references: [id])
  package ServicePackage @relation(fields: [packageId], references: [id])

  @@map("user_subscriptions")
}

// ============================================
// SUPPORT TICKETS
// ============================================

enum TicketCategory {
  BATTERY_ISSUE
  STATION_ISSUE
  PAYMENT_ISSUE
  BOOKING_ISSUE
  OTHER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model SupportTicket {
  id          String         @id @default(uuid())
  userId      String         @map("user_id")
  category    TicketCategory
  subject     String
  description String
  status      TicketStatus   @default(OPEN)
  assignedTo  String?        @map("assigned_to")
  resolution  String?
  
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  resolvedAt  DateTime?      @map("resolved_at")

  // Relations
  creator  User  @relation("TicketCreator", fields: [userId], references: [id])
  assignee User? @relation("TicketAssignee", fields: [assignedTo], references: [id])

  @@map("support_tickets")
}

// ============================================
// STATION INVENTORY (AGGREGATE)
// ============================================

model StationStock {
  id               String   @id @default(uuid())
  stationId        String   @map("station_id")
  batteryModelId   String   @map("battery_model_id")
  availableCount   Int      @default(0) @map("available_count")
  reservedCount    Int      @default(0) @map("reserved_count")
  inUseCount       Int      @default(0) @map("in_use_count")
  chargingCount    Int      @default(0) @map("charging_count")
  maintenanceCount Int      @default(0) @map("maintenance_count")
  
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  station Station @relation(fields: [stationId], references: [id])

  @@unique([stationId, batteryModelId])
  @@map("station_stocks")
}

