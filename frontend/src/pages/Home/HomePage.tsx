import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import './HomePage.css'

const HomePage: React.FC = () => {
  const navigate = useNavigate()
  const [isDarkMode, setIsDarkMode] = useState(false)
  const [showLoginModal, setShowLoginModal] = useState(false)
  const [activeTab, setActiveTab] = useState('login')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [fullName, setFullName] = useState('')
  const [accountType, setAccountType] = useState('driver')

  const handleLogin = () => {
    setShowLoginModal(true)
  }

  const handleGetStarted = () => {
    setActiveTab('register')
    setShowLoginModal(true)
  }

  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode)
  }

  const closeModal = () => {
    setShowLoginModal(false)
  }

  const handleDemoLogin = (demoType: string) => {
    if (demoType === 'driver') {
      setEmail('taixe@demo.com')
      setPassword('demo123')
    } else if (demoType === 'staff') {
      setEmail('nhanvien@demo.com')
      setPassword('demo123')
    } else if (demoType === 'admin') {
      setEmail('admin@demo.com')
      setPassword('demo123')
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (activeTab === 'login') {
      // Handle login logic here
      console.log('Login:', { email, password })
      // Navigate based on user type
      if (email.includes('admin')) {
        navigate('/admin')
      } else if (email.includes('nhanvien') || email.includes('staff')) {
        navigate('/staff')
      } else {
        navigate('/user')
      }
    } else {
      // Handle registration logic here
      console.log('Register:', { fullName, email, password, accountType })
      // Navigate based on account type
      if (accountType === 'admin') {
        navigate('/admin')
      } else if (accountType === 'staff') {
        navigate('/staff')
      } else {
        navigate('/user')
      }
    }
  }

  return (
    <div className={`homepage ${isDarkMode ? 'dark-mode' : 'light-mode'}`}>
      {/* Header */}
      <header className="header">
        <div className="header-container">
          <div className="logo">
            <span className="logo-icon">‚ö°</span>
            <span className="logo-text">EVSwap</span>
          </div>
          
          <nav className="nav">
            <a href="#features" className="nav-link">T√≠nh nƒÉng</a>
            <a href="#how-it-works" className="nav-link">C√°ch ho·∫°t ƒë·ªông</a>
            <a href="#contact" className="nav-link">Li√™n h·ªá</a>
          </nav>
          
          <div className="header-actions">
            <button className="theme-toggle" onClick={toggleTheme}>
              {isDarkMode ? '‚òÄÔ∏è' : 'üåô'}
            </button>
            <button className="btn-login" onClick={handleLogin}>ƒêƒÉng nh·∫≠p</button>
            <button className="btn-primary" onClick={handleGetStarted}>B·∫Øt ƒë·∫ßu</button>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="hero">
        <div className="hero-container">
          <div className="hero-content">
            <div className="hero-badge">
              <span>C√¥ng ngh·ªá EV C√°ch m·∫°ng</span>
            </div>
            
            <h1 className="hero-title">
              Thay Pin T·ª©c th√¨ cho Xe ƒêi·ªán
            </h1>
            
            <p className="hero-description">
              B·ªè qua th·ªùi gian ch·ªù. Thay pin trong v√≤ng d∆∞·ªõi 3 ph√∫t t·∫°i m·∫°ng l∆∞·ªõi tr·∫°m t·ª± ƒë·ªông c·ªßa ch√∫ng t√¥i. 
              Ti·∫øp t·ª•c l√°i xe trong khi ng∆∞·ªùi kh√°c v·∫´n ƒëang s·∫°c.
            </p>
            
            <div className="hero-buttons">
              <button className="btn-primary btn-large" onClick={handleGetStarted}>
                <span>‚ö°</span>
                B·∫Øt ƒë·∫ßu Thay Pin
              </button>
              <button className="btn-secondary btn-large">
                T√¨m Tr·∫°m
              </button>
            </div>
          </div>
          
          <div className="hero-image">
            <div className="station-image">
              <div className="station-sign">
                <div className="station-icon">‚õΩ</div>
                <div className="station-text">
                  <div>ELECTRIC</div>
                  <div>VEHICLE</div>
                  <div>CHARGING</div>
                  <div>STATION</div>
                </div>
                <div className="station-logo">ampUp</div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="features">
        <div className="features-container">
          <h2 className="features-title">T·∫°i sao ch·ªçn EVSwap?</h2>
          <p className="features-subtitle">
            Tr·∫£i nghi·ªám t∆∞∆°ng lai c·ªßa qu·∫£n l√Ω nƒÉng l∆∞·ª£ng xe ƒëi·ªán v·ªõi c√¥ng ngh·ªá thay pin ti√™n ti·∫øn.
          </p>
          
          <div className="features-grid">
            <div className="feature-card">
              <div className="feature-icon clock">üïí</div>
              <h3 className="feature-title">Thay Pin 3 Ph√∫t</h3>
              <p className="feature-description">
                Thay pin t·ª± ƒë·ªông trong v√≤ng d∆∞·ªõi 3 ph√∫t - nhanh h∆°n c·∫£ ƒë·ªï xƒÉng.
              </p>
            </div>
            
            <div className="feature-card">
              <div className="feature-icon location">üìç</div>
              <h3 className="feature-title">M·∫°ng l∆∞·ªõi To√†n qu·ªëc</h3>
              <p className="feature-description">
                H∆°n 500 tr·∫°m tr√™n to√†n qu·ªëc v·ªõi kh·∫£ nƒÉng ho·∫°t ƒë·ªông 24/7 v√† ki·ªÉm k√™ th·ªùi gian th·ª±c.
              </p>
            </div>
            
            <div className="feature-card">
              <div className="feature-icon battery">üîã</div>
              <h3 className="feature-title">Qu·∫£n l√Ω Pin Th√¥ng minh</h3>
              <p className="feature-description">
                Gi√°m s√°t s·ª©c kh·ªèe pin b·∫±ng AI v√† ph√¢n ph·ªëi s·∫°c t·ªëi ∆∞u tr√™n to√†n m·∫°ng l∆∞·ªõi.
              </p>
            </div>
            
            <div className="feature-card">
              <div className="feature-icon security">üõ°Ô∏è</div>
              <h3 className="feature-title">B·∫£o m·∫≠t & An to√†n</h3>
              <p className="feature-description">
                Giao th·ª©c b·∫£o m·∫≠t c·∫•p qu√¢n ƒë·ªôi v√† b·∫£o hi·ªÉm to√†n di·ªán cho m·ªçi l·∫ßn thay pin.
              </p>
            </div>
            
            <div className="feature-card">
              <div className="feature-icon users">üë•</div>
              <h3 className="feature-title">ƒêa d·∫°ng Ng∆∞·ªùi d√πng</h3>
              <p className="feature-description">
                Giao di·ªán chuy√™n d·ª•ng cho t√†i x·∫ø, nh√¢n vi√™n tr·∫°m v√† qu·∫£n tr·ªã vi√™n v·ªõi t√≠nh nƒÉng theo vai tr√≤.
              </p>
            </div>
            
            <div className="feature-card">
              <div className="feature-icon tracking">‚ö°</div>
              <h3 className="feature-title">Theo d√µi Th·ªùi gian th·ª±c</h3>
              <p className="feature-description">
                T√≠nh kh·∫£ d·ª•ng tr·∫°m tr·ª±c ti·∫øp, tr·∫°ng th√°i pin v√† ph√¢n t√≠ch d·ª± ƒëo√°n ƒë·ªÉ l·∫≠p k·∫ø ho·∫°ch tuy·∫øn ƒë∆∞·ªùng t·ªëi ∆∞u.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* How It Works Section */}
      <section id="how-it-works" className="how-it-works">
        <div className="how-it-works-container">
          <h2 className="how-it-works-title">C√°ch th·ª©c ho·∫°t ƒë·ªông</h2>
          <p className="how-it-works-subtitle">
            Thay pin ƒë∆°n gi·∫£n, nhanh ch√≥ng v√† t·ª± ƒë·ªông trong ba b∆∞·ªõc d·ªÖ d√†ng.
          </p>
          
          <div className="steps">
            <div className="step">
              <div className="step-number step-1">1</div>
              <h3 className="step-title">T√¨m & ƒê·∫∑t ch·ªó</h3>
              <p className="step-description">
                S·ª≠ d·ª•ng ·ª©ng d·ª•ng ƒë·ªÉ t√¨m tr·∫°m g·∫ßn nh·∫•t, ki·ªÉm tra t√¨nh tr·∫°ng pin v√† ƒë·∫∑t ch·ªó thay pin.
              </p>
            </div>
            
            <div className="step">
              <div className="step-number step-2">2</div>
              <h3 className="step-title">L√°i xe & Thay pin</h3>
              <p className="step-description">
                L√°i xe ƒë·∫øn tr·∫°m, ƒë·∫≠u trong khu v·ª±c ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh v√† ƒë·ªÉ robot x·ª≠ l√Ω vi·ªác thay pin t·ª± ƒë·ªông.
              </p>
            </div>
            
            <div className="step">
              <div className="step-number step-3">3</div>
              <h3 className="step-title">Thanh to√°n & ƒêi</h3>
              <p className="step-description">
                Thanh to√°n t·ª± ƒë·ªông v√† nh·∫≠n h√≥a ƒë∆°n ngay l·∫≠p t·ª©c. L√°i xe v·ªõi pin ƒë·∫ßy trong v√†i ph√∫t.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="cta">
        <div className="cta-container">
          <h2 className="cta-title">S·∫µn s√†ng tr·∫£i nghi·ªám t∆∞∆°ng lai?</h2>
          <p className="cta-subtitle">
            Tham gia c√πng h√†ng ngh√¨n t√†i x·∫ø ƒë√£ chuy·ªÉn sang thay pin t·ª©c th√¨.
          </p>
          
          <div className="cta-buttons">
            <button className="btn-primary btn-large" onClick={handleGetStarted}>ƒêƒÉng k√Ω T√†i x·∫ø</button>
            <button className="btn-outline btn-large">Tr·ªü th√†nh ƒê·ªëi t√°c Tr·∫°m</button>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="footer">
        <div className="footer-container">
          <div className="footer-brand">
            <div className="footer-logo">
              <span className="logo-icon">‚ö°</span>
              <span className="logo-text">EVSwap</span>
            </div>
            <p className="footer-tagline">
              C√°ch m·∫°ng h√≥a qu·∫£n l√Ω nƒÉng l∆∞·ª£ng xe ƒëi·ªán v·ªõi c√¥ng ngh·ªá thay pin t·ª©c th√¨.
            </p>
          </div>
          
          <div className="footer-links">
            <div className="footer-column">
              <h4 className="footer-title">S·∫£n ph·∫©m</h4>
              <ul className="footer-list">
                <li><a href="#features">T√≠nh nƒÉng</a></li>
                <li><a href="#pricing">Gi√° c·∫£</a></li>
                <li><a href="#stations">Tr·∫°m</a></li>
                <li><a href="#support">H·ªó tr·ª£</a></li>
              </ul>
            </div>
            
            <div className="footer-column">
              <h4 className="footer-title">C√¥ng ty</h4>
              <ul className="footer-list">
                <li><a href="#about">V·ªÅ ch√∫ng t√¥i</a></li>
                <li><a href="#careers">Tuy·ªÉn d·ª•ng</a></li>
                <li><a href="#news">Tin t·ª©c</a></li>
                <li><a href="#contact">Li√™n h·ªá</a></li>
              </ul>
            </div>
            
            <div className="footer-column">
              <h4 className="footer-title">Ph√°p l√Ω</h4>
              <ul className="footer-list">
                <li><a href="#privacy">Quy·ªÅn ri√™ng t∆∞</a></li>
                <li><a href="#terms">ƒêi·ªÅu kho·∫£n</a></li>
                <li><a href="#security">B·∫£o m·∫≠t</a></li>
              </ul>
            </div>
          </div>
        </div>
        
        <div className="footer-bottom">
          <p>¬© 2024 EVSwap. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</p>
        </div>
      </footer>

      {/* Login Modal */}
      {showLoginModal && (
        <div className="modal-overlay" onClick={closeModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <div className="modal-title">
                <span className="modal-icon">‚ö°</span>
                <div>
                  <h2>{activeTab === 'login' ? 'Ch√†o m·ª´ng tr·ªü l·∫°i' : 'T·∫°o t√†i kho·∫£n'}</h2>
                  <p>{activeTab === 'login' ? 'ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n EVSwap c·ªßa b·∫°n' : 'T·∫°o t√†i kho·∫£n EVSwap m·ªõi'}</p>
                </div>
              </div>
              <button className="modal-close" onClick={closeModal}>√ó</button>
            </div>

            <div className="modal-tabs">
              <button 
                className={`tab-button ${activeTab === 'login' ? 'active' : ''}`}
                onClick={() => setActiveTab('login')}
              >
                ƒêƒÉng nh·∫≠p
              </button>
              <button 
                className={`tab-button ${activeTab === 'register' ? 'active' : ''}`}
                onClick={() => setActiveTab('register')}
              >
                ƒêƒÉng k√Ω
              </button>
            </div>

            <div className="demo-accounts">
              <button 
                className="demo-btn" 
                onClick={() => handleDemoLogin('driver')}
              >
                Demo T√†i x·∫ø
              </button>
              <button 
                className="demo-btn active" 
                onClick={() => handleDemoLogin('staff')}
              >
                Demo NV
              </button>
              <button 
                className="demo-btn" 
                onClick={() => handleDemoLogin('admin')}
              >
                Demo Admin
              </button>
            </div>

            <div className="modal-separator">
              <span>HO·∫∂C TI·∫æP T·ª§C V·ªöI</span>
            </div>

            <form onSubmit={handleSubmit} className="login-form">
              {activeTab === 'register' && (
                <div className="form-group">
                  <label htmlFor="fullName">H·ªç v√† t√™n</label>
                  <input
                    type="text"
                    id="fullName"
                    value={fullName}
                    onChange={(e) => setFullName(e.target.value)}
                    placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
                    required
                  />
                </div>
              )}

              <div className="form-group">
                <label htmlFor="email">Email</label>
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder={activeTab === 'login' ? 'Nh·∫≠p email c·ªßa b·∫°n' : 'email@example.com'}
                  required
                />
              </div>

              <div className="form-group">
                <label htmlFor="password">M·∫≠t kh·∫©u</label>
                <input
                  type="password"
                  id="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder={activeTab === 'login' ? 'Nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n' : 'T·∫°o m·∫≠t kh·∫©u'}
                  required
                />
              </div>

              {activeTab === 'register' && (
                <div className="form-group">
                  <label htmlFor="accountType">Lo·∫°i t√†i kho·∫£n</label>
                  <select
                    id="accountType"
                    value={accountType}
                    onChange={(e) => setAccountType(e.target.value)}
                    className="form-select"
                    required
                  >
                    <option value="driver">T√†i x·∫ø</option>
                    <option value="staff">Nh√¢n vi√™n</option>
                    <option value="admin">Qu·∫£n tr·ªã vi√™n</option>
                  </select>
                </div>
              )}

              <button type="submit" className="login-submit-btn">
                {activeTab === 'login' ? 'ƒêƒÉng nh·∫≠p' : 'T·∫°o t√†i kho·∫£n'}
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

export default HomePage
